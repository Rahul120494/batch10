pipeline{
    
        agent any
    
        stages{
            stage('SCM'){
                steps{
                    git 'https://github.com/Rahul120494/batch10.git'
                }
            }
            
            stage("Sonar scan of source code") {
              steps {
                  withSonarQubeEnv('sonarqube') {
                     sh 'mvn clean package sonar:sonar'
                  }
              }
            }
                    
            stage('publish report'){
                steps {
                    junit allowEmptyResults: true, skipPublishingChecks: true, testResults: '*/target/surefire-reports/*.xml'
                }
            }
            
            stage('docker build'){
                steps{
                    echo 'starting docker build'
                    sh "docker build . -t rahul120494/springboottest:1.1.1 "
                }
            }
            
            stage('docker image push'){
                steps{
                    withCredentials([string(credentialsId: 'dockerId', variable: 'dockerPassword')]) {
                        sh "docker login -u rahul120494 -p ${dockerPassword} "
                }
                    sh "docker push rahul120494/springboottest:1.1.1 "
                }
            }
            
            stage('docker image deploy'){
                steps{
                  ansiblePlaybook become: true, credentialsId: 'rahul', disableHostKeyChecking: true, installation: 'ansible', playbook: 'deploy.yml'
                }
            }
        }
        /*post {  
         success {  
             mail bcc: '', body: "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: '', charset: 'UTF-8', from: '', mimeType: 'text/html', replyTo: '', subject: "Success CI: Project name -> ${env.JOB_NAME}", to: "rahul.bastia007@gmail.com";  
         }  
         failure {  
             emailext body: ' "<b>Example</b><br>Project: ${env.JOB_NAME} <br>Build Number: ${env.BUILD_NUMBER} <br> URL de build: ${env.BUILD_URL}", cc: \'\', charset: \'UTF-8\', from: \'\', mimeType: \'text/html\'', subject: '"ERROR CI: Project name -> ${env.JOB_NAME}"', to: 'rahul.bastia007@gmail.com'
         }  
         unstable {  
             echo 'This will run only if the run was marked as unstable'  
         }  
         changed {  
             echo 'This will run only if the state of the Pipeline has changed'  
             echo 'For example, if the Pipeline was previously failing but is now successful'  
         }  
     } */
     
    }
    /*
}
catch(Exception e){
    currentBuild.result="FAILURE"
    emailext body: 'Pipeline failed due to Exception',
    subject: 'Jenkins Notification: devops Pipeline Failed', 
    to: 'rahul.bastia007@gmail.com'
}
finally {
    (currentBuild.result!= "ABORTED") && node("master") {
        echo "Jenkins - Finally Block"
    }
}*/
